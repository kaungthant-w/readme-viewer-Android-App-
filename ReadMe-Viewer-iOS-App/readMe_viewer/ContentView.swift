//

// Â ContentView.swift

// Â test

//

// Â Created by Kyaw Myo Thant on 15/07/2025.

//

import SwiftUI

import UniformTypeIdentifiers

struct ContentView: View {

Â  Â  @State private var markdownText: String = ""

Â  Â  @State private var isDarkMode: Bool = false

Â  Â  @State private var showPicker = false

Â  Â  @State private var showSettings = false

Â  Â  @State private var fontSize: CGFloat = 16 // Added font size state

Â  Â  @State private var isFullScreen: Bool = false // Full screen toggle

Â  Â  @State private var showShareSheet: Bool = false

Â  Â  @State private var pdfData: Data? = nil

Â  Â  @State private var exportPDFRequested: Bool = false

Â  Â  @State private var recentFiles: [URL] = []

Â  Â  @State private var selectedFileURL: URL? = nil

Â  Â  @State private var selectedTab: Int = 0

Â  Â  var body: some View {

Â  Â  Â  Â  if isFullScreen && !markdownText.isEmpty {

Â  Â  Â  Â  Â  Â  ZStack {

Â  Â  Â  Â  Â  Â  Â  Â  (isDarkMode ? Color.black : Color.white)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .ignoresSafeArea()

Â  Â  Â  Â  Â  Â  Â  Â  VStack(spacing: 0) {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // Full screen header with exit button

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  HStack {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Button(action: { isFullScreen = false }) {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Image(systemName: "arrow.down.right.and.arrow.up.left")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .font(.system(size: 20))

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .padding(10)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Spacer()

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Text("Full Screen Preview")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .font(.headline)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Spacer()

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .padding()

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .background(isDarkMode ? Color.black : Color.white)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .foregroundColor(isDarkMode ? .white : .black)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .shadow(color: Color.black.opacity(0.1), radius: 2, y: 2)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  AnyView(MarkdownWebView(markdownText: markdownText, isDarkMode: isDarkMode, fontSize: fontSize, exportPDFRequested: $exportPDFRequested, onExportPDF: { data in

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  self.pdfData = data

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  self.showShareSheet = true

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }))

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .frame(maxWidth: .infinity, maxHeight: .infinity)

Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  } else {

Â  Â  Â  Â  Â  Â  TabView(selection: $selectedTab) {

Â  Â  Â  Â  Â  Â  Â  Â  // Home Tab

Â  Â  Â  Â  Â  Â  Â  Â  ZStack {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  (isDarkMode ? Color.black : Color.white)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .ignoresSafeArea()

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  VStack(spacing: 0) {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // Header with controls

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  HStack {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if !markdownText.isEmpty {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Button(action: { markdownText = "" }) {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Image(systemName: "arrow.left")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .font(.system(size: 20))

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .padding(10)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Spacer()

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Text(markdownText.isEmpty ? "Readme Viewer" : "Preview")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .font(.headline)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Spacer()

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  HStack(spacing: 16) {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Button(action: { showSettings.toggle() }) {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Image(systemName: "textformat.size")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .font(.system(size: 20))

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .padding(10)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Button(action: { isDarkMode.toggle() }) {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Image(systemName: isDarkMode ? "sun.max.fill" : "moon.fill")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .font(.system(size: 20))

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .padding(10)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // Export PDF button

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if !markdownText.isEmpty {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Button(action: { exportPDFRequested = true }) {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Image(systemName: "square.and.arrow.up")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .font(.system(size: 20))

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .padding(10)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // Full screen button

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if !markdownText.isEmpty {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Button(action: { isFullScreen = true }) {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Image(systemName: "arrow.up.left.and.arrow.down.right")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .font(.system(size: 20))

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .padding(10)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .padding()

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .background(isDarkMode ? Color.black : Color.white)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .foregroundColor(isDarkMode ? .white : .black)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .shadow(color: Color.black.opacity(0.1), radius: 2, y: 2)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // Main content

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if markdownText.isEmpty {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  VStack(spacing: 20) {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Spacer()

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Text("ðŸ“„ No file selected")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .font(.title2)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .foregroundColor(.gray)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Text("Tap below to open a md file")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .foregroundColor(.gray)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Button("ðŸ“‚ Choose .md File") {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  showPicker = true

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .padding()

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .background(Color.gray)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .foregroundColor(.white)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .cornerRadius(8)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Spacer()

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  } else {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  AnyView(MarkdownWebView(markdownText: markdownText, isDarkMode: isDarkMode, fontSize: fontSize, exportPDFRequested: $exportPDFRequested, onExportPDF: { data in

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  self.pdfData = data

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  self.showShareSheet = true

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }))

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // Font size slider only when file is loaded

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  HStack {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Text("Font Size: ")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Slider(value: $fontSize, in: 12...32, step: 1) {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Text("Font Size")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Text("\(Int(fontSize))")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .padding(.horizontal)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  .tabItem {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Image(systemName: "house")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Text("Home")

Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  .tag(0)

Â  Â  Â  Â  Â  Â  Â  Â  // Recent Tab

Â  Â  Â  Â  Â  Â  Â  Â  ZStack {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  (isDarkMode ? Color.black : Color.white)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .ignoresSafeArea()

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  VStack(spacing: 0) {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  HStack {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Spacer()

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Text("Recent Files")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .font(.headline)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Spacer()

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .padding()

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .background(isDarkMode ? Color.black : Color.white)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .foregroundColor(isDarkMode ? .white : .black)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .shadow(color: Color.black.opacity(0.1), radius: 2, y: 2)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if recentFiles.isEmpty {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Spacer()

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Text("No recent files.")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .foregroundColor(isDarkMode ? .white : .black)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Spacer()

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  } else {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  List {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ForEach(recentFiles, id: \.self) { fileURL in

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Button(action: {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  loadMarkdownFile(from: fileURL)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  selectedTab = 0 // Switch to Home tab

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }) {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Text(fileURL.lastPathComponent)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .foregroundColor(isDarkMode ? .white : .black)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .listStyle(InsetGroupedListStyle())

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .background(isDarkMode ? Color.black : Color.white)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .environment(\ .colorScheme, isDarkMode ? .dark : .light)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .background(isDarkMode ? Color.black : Color.white)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .foregroundColor(isDarkMode ? .white : .black)

Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  .tabItem {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Image(systemName: "clock")

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Text("Recent")

Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  .tag(1)

Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  .sheet(isPresented: $showPicker) {

Â  Â  Â  Â  Â  Â  Â  Â  DocumentPicker(markdownText: $markdownText, onPick: { url in

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if let url = url, url.pathExtension.lowercased() == "md" {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  addRecentFile(url)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  selectedFileURL = url

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  } else {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // Clear markdownText and selectedFileURL if not md

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  markdownText = ""

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  selectedFileURL = nil

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â  Â  })

Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  .sheet(isPresented: $showSettings) {

Â  Â  Â  Â  Â  Â  Â  Â  SettingsView(fontSize: $fontSize, isDarkMode: $isDarkMode)

Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  .sheet(isPresented: $showShareSheet) {

Â  Â  Â  Â  Â  Â  Â  Â  if let pdfData = pdfData {

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ShareSheet(activityItems: [pdfData])

Â  Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  }

Â  Â  }

Â  Â  // Add file to recent list

Â  Â  private func addRecentFile(_ url: URL) {

Â  Â  Â  Â  if !recentFiles.contains(url) {

Â  Â  Â  Â  Â  Â  recentFiles.insert(url, at: 0)

Â  Â  Â  Â  Â  Â  if recentFiles.count > 5 {

Â  Â  Â  Â  Â  Â  Â  Â  recentFiles = Array(recentFiles.prefix(5))

Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  } else {

Â  Â  Â  Â  Â  Â  // Move to front

Â  Â  Â  Â  Â  Â  recentFiles.removeAll { $0 == url }

Â  Â  Â  Â  Â  Â  recentFiles.insert(url, at: 0)

Â  Â  Â  Â  }

Â  Â  }

Â  Â  // Load markdown from file URL

Â  Â  private func loadMarkdownFile(from url: URL) {

Â  Â  Â  Â  // Only allow .md files

Â  Â  Â  Â  guard url.pathExtension.lowercased() == "md" else { return }

Â  Â  Â  Â  if let data = try? Data(contentsOf: url), let text = String(data: data, encoding: .utf8) {

Â  Â  Â  Â  Â  Â  markdownText = text

Â  Â  Â  Â  Â  Â  selectedFileURL = url

Â  Â  Â  Â  Â  Â  addRecentFile(url)

Â  Â  Â  Â  }

Â  Â  }

}

#if canImport(UIKit)

import UIKit

struct ShareSheet: UIViewControllerRepresentable {

Â  Â  var activityItems: [Any]

Â  Â  var applicationActivities: [UIActivity]? = nil

Â  Â  func makeUIViewController(context: Context) -> UIActivityViewController {

Â  Â  Â  Â  UIActivityViewController(activityItems: activityItems, applicationActivities: applicationActivities)

Â  Â  }

Â  Â  func updateUIViewController(_ uiViewController: UIActivityViewController, context: Context) {}

}

#endif

#Preview {

Â  Â  ContentView()

}